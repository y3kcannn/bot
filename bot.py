import discord
from discord.ext import commands
import requests
import json
import asyncio
from datetime import datetime
import os

# Bot Configuration
TOKEN = "YOUR_BOT_TOKEN_HERE"
GUILD_ID = 1234567890  # Your Discord server ID
ADMIN_ROLE = "Admin"   # Role name that can use admin commands
API_URL = "https://your-domain.com/api_optimized.php"
API_TOKEN = "ADMIN_API_SECRET_TOKEN_2024"

# Bot setup
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

def make_api_request(action, data=None):
    """Make API request to the server"""
    try:
        url = f"{API_URL}?api=1&token={API_TOKEN}&action={action}"
        
        if data:
            response = requests.post(url, data=data, timeout=10)
        else:
            response = requests.get(url, timeout=10)
            
        return response.json()
    except Exception as e:
        return {"error": f"API request failed: {str(e)}"}

def has_admin_role():
    """Check if user has admin role"""
    def predicate(ctx):
        return any(role.name == ADMIN_ROLE for role in ctx.author.roles)
    return commands.check(predicate)

@bot.event
async def on_ready():
    print(f'🚀 {bot.user} is online and ready!')
    print(f'📊 Connected to {len(bot.guilds)} servers')
    
    # Set bot status
    await bot.change_presence(
        status=discord.Status.online,
        activity=discord.Game(name="🔐 Keylogin Management System")
    )

@bot.command(name='genkey', aliases=['generate', 'gen'])
@has_admin_role()
async def generate_key(ctx):
    """Generate a new license key"""
    
    embed = discord.Embed(
        title="🔄 Generating Key...",
        description="Please wait while we generate your license key.",
        color=discord.Color.yellow()
    )
    message = await ctx.send(embed=embed)
    
    # Generate key via API
    result = make_api_request('generate-key')
    
    if 'error' in result:
        embed = discord.Embed(
            title="❌ Key Generation Failed",
            description=f"Error: {result['error']}",
            color=discord.Color.red()
        )
        await message.edit(embed=embed)
        return
    
    # Success
    embed = discord.Embed(
        title="✅ Key Generated Successfully",
        color=discord.Color.green()
    )
    embed.add_field(name="🔑 License Key", value=f"`{result['key']}`", inline=False)
    embed.add_field(name="📅 Created", value=result['created'], inline=True)
    embed.add_field(name="📋 Status", value="Ready to use", inline=True)
    embed.set_footer(text="⚠️ Keep this key secure and share only with authorized users")
    
    await message.edit(embed=embed)
    
    # Log to console
    print(f"🔑 Key generated by {ctx.author}: {result['key']}")

@bot.command(name='ban')
@has_admin_role()
async def ban_user(ctx, username=None, ip=None):
    """Ban a user by username and/or IP"""
    
    if not username and not ip:
        embed = discord.Embed(
            title="❌ Invalid Usage",
            description="Usage: `!ban <username> [ip]`\nExample: `!ban John123 192.168.1.100`",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    embed = discord.Embed(
        title="🔄 Processing Ban...",
        description="Banning user from the system...",
        color=discord.Color.yellow()
    )
    message = await ctx.send(embed=embed)
    
    # Prepare ban data
    ban_data = {}
    if username:
        ban_data['username'] = username
    if ip:
        ban_data['ip'] = ip
    
    # Ban via API
    result = make_api_request('ban-user', ban_data)
    
    if 'error' in result:
        embed = discord.Embed(
            title="❌ Ban Failed",
            description=f"Error: {result['error']}",
            color=discord.Color.red()
        )
        await message.edit(embed=embed)
        return
    
    # Success
    embed = discord.Embed(
        title="🔨 User Banned Successfully",
        color=discord.Color.red()
    )
    
    if username:
        embed.add_field(name="👤 Username", value=f"`{username}`", inline=True)
    if ip:
        embed.add_field(name="🌐 IP Address", value=f"`{ip}`", inline=True)
    
    embed.add_field(name="📅 Banned At", value=datetime.now().strftime("%Y-%m-%d %H:%M:%S"), inline=False)
    embed.set_footer(text="🚫 This user can no longer access the system")
    
    await message.edit(embed=embed)
    
    # Log to console
    print(f"🔨 User banned by {ctx.author}: {username} / {ip}")

@bot.command(name='checkban', aliases=['check'])
@has_admin_role()
async def check_ban(ctx, username=None, ip=None):
    """Check if a user is banned"""
    
    if not username and not ip:
        embed = discord.Embed(
            title="❌ Invalid Usage",
            description="Usage: `!checkban <username> [ip]`\nExample: `!checkban John123`",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # Prepare check data
    check_data = {}
    if username:
        check_data['username'] = username
    if ip:
        check_data['ip'] = ip
    
    # Check via API
    result = make_api_request('check-ban', check_data)
    
    if 'error' in result:
        embed = discord.Embed(
            title="❌ Check Failed",
            description=f"Error: {result['error']}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # Display result
    if result.get('banned', False):
        embed = discord.Embed(
            title="🚫 User is Banned",
            color=discord.Color.red()
        )
        status_icon = "🚫"
        status_text = "BANNED"
    else:
        embed = discord.Embed(
            title="✅ User is Not Banned",
            color=discord.Color.green()
        )
        status_icon = "✅"
        status_text = "ALLOWED"
    
    if username:
        embed.add_field(name="👤 Username", value=f"`{username}`", inline=True)
    if ip:
        embed.add_field(name="🌐 IP Address", value=f"`{ip}`", inline=True)
    
    embed.add_field(name="📊 Status", value=f"{status_icon} {status_text}", inline=False)
    
    await ctx.send(embed=embed)

@bot.command(name='stats', aliases=['statistics'])
@has_admin_role()
async def show_stats(ctx):
    """Show system statistics"""
    
    embed = discord.Embed(
        title="🔄 Loading Statistics...",
        description="Fetching system data...",
        color=discord.Color.yellow()
    )
    message = await ctx.send(embed=embed)
    
    # Get stats via API
    result = make_api_request('stats')
    
    if 'error' in result:
        embed = discord.Embed(
            title="❌ Failed to Load Stats",
            description=f"Error: {result['error']}",
            color=discord.Color.red()
        )
        await message.edit(embed=embed)
        return
    
    # Create stats embed
    embed = discord.Embed(
        title="📊 System Statistics",
        color=discord.Color.blue(),
        timestamp=datetime.now()
    )
    
    # Keys section
    embed.add_field(
        name="🔑 License Keys",
        value=f"**Total:** {result['total_keys']}\n**Used:** {result['used_keys']}\n**Available:** {result['available_keys']}",
        inline=True
    )
    
    # Bans section
    embed.add_field(
        name="🚫 Banned Users",
        value=f"**Usernames:** {result['banned_users']}\n**IP Addresses:** {result['banned_ips']}\n**Total:** {result['banned_users'] + result['banned_ips']}",
        inline=True
    )
    
    # Activity section
    embed.add_field(
        name="📈 Activity",
        value=f"**Access Attempts:** {result['total_access_attempts']}\n**System Status:** 🟢 Online",
        inline=True
    )
    
    embed.set_footer(text="📊 Live system statistics")
    
    await message.edit(embed=embed)

@bot.command(name='keys', aliases=['listkeys'])
@has_admin_role()
async def list_keys(ctx):
    """List all license keys"""
    
    embed = discord.Embed(
        title="🔄 Loading Keys...",
        description="Fetching license key data...",
        color=discord.Color.yellow()
    )
    message = await ctx.send(embed=embed)
    
    # Get keys via API
    result = make_api_request('list-keys')
    
    if 'error' in result:
        embed = discord.Embed(
            title="❌ Failed to Load Keys",
            description=f"Error: {result['error']}",
            color=discord.Color.red()
        )
        await message.edit(embed=embed)
        return
    
    keys = result.get('keys', {})
    
    if not keys:
        embed = discord.Embed(
            title="🔑 License Keys",
            description="No keys found in the system.",
            color=discord.Color.orange()
        )
        await message.edit(embed=embed)
        return
    
    # Create keys display
    embed = discord.Embed(
        title="🔑 License Keys",
        color=discord.Color.blue(),
        timestamp=datetime.now()
    )
    
    used_keys = []
    unused_keys = []
    
    for key, data in (keys.items() if isinstance(keys, dict) else []):
        if data['used']:
            used_keys.append(f"`{key}` - {data['username']} ({data['first_use']})")
        else:
            unused_keys.append(f"`{key}` - Created: {data['created']}")
    
    if unused_keys:
        embed.add_field(
            name="🆕 Available Keys",
            value="\n".join(unused_keys[:10]) + (f"\n*... and {len(unused_keys)-10} more*" if len(unused_keys) > 10 else ""),
            inline=False
        )
    
    if used_keys:
        embed.add_field(
            name="✅ Used Keys",
            value="\n".join(used_keys[:10]) + (f"\n*... and {len(used_keys)-10} more*" if len(used_keys) > 10 else ""),
            inline=False
        )
    
    embed.set_footer(text=f"📊 Total: {len(keys)} keys")
    
    await message.edit(embed=embed)

@bot.command(name='banned', aliases=['listbanned'])
@has_admin_role()
async def list_banned(ctx):
    """List all banned users"""
    
    embed = discord.Embed(
        title="🔄 Loading Banned Users...",
        description="Fetching ban list...",
        color=discord.Color.yellow()
    )
    message = await ctx.send(embed=embed)
    
    # Get banned users via API
    result = make_api_request('list-banned')
    
    if 'error' in result:
        embed = discord.Embed(
            title="❌ Failed to Load Ban List",
            description=f"Error: {result['error']}",
            color=discord.Color.red()
        )
        await message.edit(embed=embed)
        return
    
    banned = result.get('banned', {'usernames': [], 'ips': []})
    
    usernames = banned.get('usernames', [])
    ips = banned.get('ips', [])
    
    if not usernames and not ips:
        embed = discord.Embed(
            title="🚫 Banned Users",
            description="No banned users found.",
            color=discord.Color.green()
        )
        await message.edit(embed=embed)
        return
    
    # Create banned list display
    embed = discord.Embed(
        title="🚫 Banned Users",
        color=discord.Color.red(),
        timestamp=datetime.now()
    )
    
    if usernames:
        usernames_text = "\n".join([f"• `{username}`" for username in usernames])
        embed.add_field(
            name="👤 Banned Usernames",
            value=usernames_text[:1024],  # Discord field limit
            inline=False
        )
    
    if ips:
        ips_text = "\n".join([f"• `{ip}`" for ip in ips])
        embed.add_field(
            name="🌐 Banned IP Addresses",
            value=ips_text[:1024],  # Discord field limit
            inline=False
        )
    
    total_banned = len(usernames) + len(ips)
    embed.set_footer(text=f"🚫 Total banned entries: {total_banned}")
    
    await message.edit(embed=embed)

@bot.command(name='help', aliases=['commands'])
async def show_help(ctx):
    """Show available commands"""
    
    embed = discord.Embed(
        title="🤖 Keylogin Management Bot",
        description="Available commands for system management",
        color=discord.Color.blue()
    )
    
    embed.add_field(
        name="🔑 Key Management",
        value="`!genkey` - Generate new license key\n`!keys` - List all license keys",
        inline=False
    )
    
    embed.add_field(
        name="🚫 Ban Management",
        value="`!ban <username> [ip]` - Ban user\n`!checkban <username> [ip]` - Check ban status\n`!banned` - List banned users",
        inline=False
    )
    
    embed.add_field(
        name="📊 System Info",
        value="`!stats` - Show system statistics\n`!help` - Show this help message",
        inline=False
    )
    
    embed.add_field(
        name="🔧 Requirements",
        value=f"• Admin role: `{ADMIN_ROLE}`\n• All commands require admin permissions",
        inline=False
    )
    
    embed.set_footer(text="🔐 Secure license management system")
    
    await ctx.send(embed=embed)

@bot.event
async def on_command_error(ctx, error):
    """Handle command errors"""
    
    if isinstance(error, commands.CheckFailure):
        embed = discord.Embed(
            title="❌ Access Denied",
            description=f"You need the `{ADMIN_ROLE}` role to use this command.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
    
    elif isinstance(error, commands.CommandNotFound):
        embed = discord.Embed(
            title="❓ Unknown Command",
            description="Use `!help` to see available commands.",
            color=discord.Color.orange()
        )
        await ctx.send(embed=embed)
    
    else:
        embed = discord.Embed(
            title="⚠️ Command Error",
            description=f"An error occurred: {str(error)}",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        print(f"Command error: {error}")

if __name__ == "__main__":
    print("🚀 Starting Keylogin Management Bot...")
    print("📋 Make sure to configure:")
    print("   • TOKEN - Your Discord bot token")
    print("   • GUILD_ID - Your Discord server ID")
    print("   • API_URL - Your API server URL")
    print("   • ADMIN_ROLE - Admin role name")
    print("=" * 50)
    
    try:
        bot.run(TOKEN)
    except Exception as e:
        print(f"❌ Failed to start bot: {e}") 

import os
import discord
from discord.ext import commands
import requests
import json
import asyncio
from datetime import datetime

# Bot Configuration
TOKEN = os.getenv("TOKEN")
GUILD_ID = 1234567890  # Your Discord server ID
ADMIN_ROLE = os.getenv("ADMIN_ROLE", "Admin")
API_URL = os.getenv("API_URL")
API_TOKEN = os.getenv("API_TOKEN")

# Bot setup
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

# Varsayılan help komutunu kaldır
bot.remove_command('help')

def make_api_request(action, data=None):
    """Make API request to the server"""
    try:
        url = f"{API_URL}?api=1&token={API_TOKEN}&action={action}"
        
        if data:
            response = requests.post(url, data=data, timeout=10)
        else:
            response = requests.get(url, timeout=10)
            
        return response.json()
    except Exception as e:
        return {"error": f"API request failed: {str(e)}"}

def has_admin_role():
    """Check if user has admin role"""
    def predicate(ctx):
        return any(role.name == ADMIN_ROLE for role in ctx.author.roles)
    return commands.check(predicate)

def create_embed(title, description=None, color=0x00ff00):
    """Create a beautiful embed with bot profile"""
    embed = discord.Embed(
        title=title,
        description=description,
        color=color,
        timestamp=datetime.utcnow()
    )
    embed.set_footer(
        text="Keylogin Management System",
        icon_url=bot.user.avatar.url if bot.user.avatar else None
    )
    embed.set_thumbnail(url=bot.user.avatar.url if bot.user.avatar else None)
    return embed

@bot.event
async def on_ready():
    print(f'🚀 {bot.user} is online and ready!')
    print(f'📊 Connected to {len(bot.guilds)} servers')
    
    # Set bot status
    await bot.change_presence(
        status=discord.Status.online,
        activity=discord.Game(name="🔐 Keylogin Management")
    )

@bot.command(name='genkey')
@has_admin_role()
async def generate_key(ctx):
    """Generate a new license key"""
    
    # Delete user's command message
    try:
        await ctx.message.delete()
    except:
        pass
    
    # Create loading embed
    loading_embed = create_embed(
        "🔄 Key Oluşturuluyor...",
        "Lütfen bekleyin, yeni lisans anahtarı oluşturuluyor.",
        0xffff00
    )
    msg = await ctx.send(embed=loading_embed)
    
    # Generate key via API
    result = make_api_request('generate-key')
    
    if 'error' in result:
        error_embed = create_embed(
            "❌ Hata Oluştu",
            f"**Hata:** {result['error']}",
            0xff0000
        )
        await msg.edit(embed=error_embed)
        return
    
    # Success embed
    success_embed = create_embed(
        "✅ Key Başarıyla Oluşturuldu",
        f"**🔑 Yeni Key:** `{result['key']}`\n**📅 Oluşturulma:** {result['created']}\n**👤 Oluşturan:** {ctx.author.mention}",
        0x00ff00
    )
    success_embed.add_field(
        name="📋 Bilgi", 
        value="Bu key'i güvenli bir yerde saklayın!", 
        inline=False
    )
    await msg.edit(embed=success_embed)
    
    # Log to console
    print(f"🔑 Key generated by {ctx.author}: {result['key']}")

@bot.command(name='ban')
@has_admin_role()
async def ban_user(ctx, username=None, ip=None):
    """Ban a user by username and/or IP"""
    
    # Delete user's command message
    try:
        await ctx.message.delete()
    except:
        pass
    
    if not username and not ip:
        error_embed = create_embed(
            "❌ Hatalı Kullanım",
            "**Kullanım:** `!ban <kullanıcı_adı> [ip]`\n**Örnek:** `!ban TestUser 192.168.1.1`",
            0xff0000
        )
        await ctx.send(embed=error_embed)
        return
    
    ban_data = {}
    if username:
        ban_data['username'] = username
    if ip:
        ban_data['ip'] = ip
    
    # Create loading embed
    loading_embed = create_embed(
        "🔄 Kullanıcı Banlanıyor...",
        f"**👤 Kullanıcı:** {username or 'Belirtilmedi'}\n**🌐 IP:** {ip or 'Belirtilmedi'}",
        0xffff00
    )
    msg = await ctx.send(embed=loading_embed)
    
    # Ban via API
    result = make_api_request('ban-user', ban_data)
    
    if 'error' in result:
        error_embed = create_embed(
            "❌ Ban Hatası",
            f"**Hata:** {result['error']}",
            0xff0000
        )
        await msg.edit(embed=error_embed)
        return
    
    # Success embed
    success_embed = create_embed(
        "🚫 Kullanıcı Başarıyla Banlandı",
        f"**👤 Kullanıcı:** `{username or 'Belirtilmedi'}`\n**🌐 IP:** `{ip or 'Belirtilmedi'}`\n**👮 Banleyen:** {ctx.author.mention}",
        0xff6600
    )
    success_embed.add_field(
        name="⚠️ Uyarı", 
        value="Bu kullanıcı artık sisteme erişemeyecek!", 
        inline=False
    )
    await msg.edit(embed=success_embed)
    
    # Log to console
    print(f"🔨 User banned by {ctx.author}: {username} / {ip}")

@bot.command(name='checkban')
@has_admin_role()
async def check_ban(ctx, username=None, ip=None):
    """Check if a user is banned"""
    
    # Delete user's command message
    try:
        await ctx.message.delete()
    except:
        pass
    
    if not username and not ip:
        error_embed = create_embed(
            "❌ Hatalı Kullanım",
            "**Kullanım:** `!checkban <kullanıcı_adı> [ip]`\n**Örnek:** `!checkban TestUser 192.168.1.1`",
            0xff0000
        )
        await ctx.send(embed=error_embed)
        return
    
    # Prepare check data
    check_data = {}
    if username:
        check_data['username'] = username
    if ip:
        check_data['ip'] = ip
    
    # Check via API
    result = make_api_request('check-ban', check_data)
    
    if 'error' in result:
        error_embed = create_embed(
            "❌ Kontrol Hatası",
            f"**Hata:** {result['error']}",
            0xff0000
        )
        await ctx.send(embed=error_embed)
        return
    
    # Display result
    if result.get('banned'):
        banned_embed = create_embed(
            "🚫 KULLANICI BANLI",
            f"**👤 Kullanıcı:** `{username or 'Belirtilmedi'}`\n**🌐 IP:** `{ip or 'Belirtilmedi'}`\n**🔍 Kontrol Eden:** {ctx.author.mention}",
            0xff0000
        )
        banned_embed.add_field(
            name="📊 Durum", 
            value="Bu kullanıcı sistemden banlanmış!", 
            inline=False
        )
    else:
        clean_embed = create_embed(
            "✅ KULLANICI TEMİZ",
            f"**👤 Kullanıcı:** `{username or 'Belirtilmedi'}`\n**🌐 IP:** `{ip or 'Belirtilmedi'}`\n**🔍 Kontrol Eden:** {ctx.author.mention}",
            0x00ff00
        )
        clean_embed.add_field(
            name="📊 Durum", 
            value="Bu kullanıcı banlanmamış ve sisteme erişebilir.", 
            inline=False
        )
    
    await ctx.send(embed=banned_embed if result.get('banned') else clean_embed)

@bot.command(name='stats')
@has_admin_role()
async def show_stats(ctx):
    """Show system statistics"""
    
    # Delete user's command message
    try:
        await ctx.message.delete()
    except:
        pass
    
    result = make_api_request('stats')
    
    if 'error' in result:
        error_embed = create_embed(
            "❌ İstatistik Hatası",
            f"**Hata:** {result['error']}",
            0xff0000
        )
        await ctx.send(embed=error_embed)
        return
    
    stats_embed = create_embed(
        "📊 Sistem İstatistikleri",
        f"**🔍 Talep Eden:** {ctx.author.mention}\n**⏰ Güncelleme:** <t:{int(__import__('time').time())}:R>",
        0x0099ff
    )
    
    # Ana istatistikler - İki sütunlu
    stats_embed.add_field(
        name="🔑 Lisans Durumu",
        value=f"```yaml\nToplam Keys : {result['total_keys']:>3}\nKullanılmış : {result['used_keys']:>3}\nMevcut     : {result['available_keys']:>3}```",
        inline=True
    )
    
    stats_embed.add_field(
        name="🚫 Güvenlik Durumu", 
        value=f"```yaml\nBanli User : {result['banned_users']:>3}\nBanli IP   : {result['banned_ips']:>3}\nToplam Ban : {result['banned_users'] + result['banned_ips']:>3}```",
        inline=True
    )
    
    # Boş alan
    stats_embed.add_field(name="\u200b", value="\u200b", inline=False)
    
    # Aktivite istatistikleri - Tek sütun
    activity_percentage = min(100, (result['total_access_attempts'] / max(1, result['total_keys'])) * 100) if result['total_keys'] > 0 else 0
    key_usage_percentage = (result['used_keys'] / max(1, result['total_keys'])) * 100 if result['total_keys'] > 0 else 0
    
    stats_embed.add_field(
        name="📈 Aktivite Analizi",
        value=f"""
```yaml
Erişim Denemeleri    : {result['total_access_attempts']:>5}
Key Kullanım Oranı   : %{key_usage_percentage:.1f}
Sistem Aktivitesi    : %{activity_percentage:.1f}
Güvenlik Seviyesi    : {'🟢 Yüksek' if result['banned_users'] + result['banned_ips'] > 0 else '🟡 Normal'}
```""",
        inline=False
    )
    
    # Durum göstergeleri - İki sütunlu
    stats_embed.add_field(
        name="🎯 Sistem Durumu",
        value="```\n🟢 API     : Aktif\n🟢 Database: Çalışıyor\n🟢 Güvenlik: Aktif```",
        inline=True
    )
    
    stats_embed.add_field(
        name="🔄 Son Güncelleme",
        value="```\n📊 Stats  : Şimdi\n🔄 Realtime: Aktif\n⚡ Hız     : Optimal```",
        inline=True
    )
    
    await ctx.send(embed=stats_embed)

@bot.command(name='keys')
@has_admin_role()
async def list_keys(ctx):
    """List all license keys"""
    
    # Delete user's command message
    try:
        await ctx.message.delete()
    except:
        pass
    
    result = make_api_request('list-keys')
    
    if 'error' in result:
        error_embed = create_embed(
            "❌ Key Listeleme Hatası",
            f"**Hata:** {result['error']}",
            0xff0000
        )
        await ctx.send(embed=error_embed)
        return
    
    keys = result.get('keys', {})
    
    if not keys:
        empty_embed = create_embed(
            "📝 Key Listesi",
            "**Henüz oluşturulmuş key bulunamadı.**\n`!genkey` komutuyla yeni key oluşturabilirsiniz.",
            0xffff00
        )
        await ctx.send(embed=empty_embed)
        return
    
    keys_embed = create_embed(
        "🔑 Key Listesi",
        f"**📋 Toplam {len(keys)} key bulundu**\n**🔍 Talep Eden:** {ctx.author.mention}",
        0x9932cc
    )
    
    key_list = ""
    for i, (key, data) in enumerate(list(keys.items())[:10], 1):
        status = "🟢 KULLANILMADI" if not data['used'] else "🔴 KULLANILDI"
        username = data.get('username', '-')
        key_list += f"**{i}.** `{key}`\n   {status} • {username}\n\n"
    
    if key_list:
        keys_embed.add_field(
            name="📋 Key Detayları (İlk 10)",
            value=key_list,
            inline=False
        )
    
    if len(keys) > 10:
        keys_embed.add_field(
            name="ℹ️ Bilgi",
            value=f"Sadece ilk 10 key gösteriliyor. Toplam: {len(keys)} key",
            inline=False
        )
    
    await ctx.send(embed=keys_embed)

@bot.command(name='banned')
@has_admin_role()
async def list_banned(ctx):
    """List all banned users"""
    
    # Delete user's command message
    try:
        await ctx.message.delete()
    except:
        pass
    
    result = make_api_request('list-banned')
    
    if 'error' in result:
        error_embed = create_embed(
            "❌ Ban Listeleme Hatası",
            f"**Hata:** {result['error']}",
            0xff0000
        )
        await ctx.send(embed=error_embed)
        return
    
    banned = result.get('banned', {'usernames': [], 'ips': []})
    
    banned_embed = create_embed(
        "🚫 Banli Kullanıcı Listesi",
        f"**🔍 Talep Eden:** {ctx.author.mention}",
        0xff4444
    )
    
    if banned['usernames']:
        usernames_text = "\n".join([f"• `{user}`" for user in banned['usernames']])
        banned_embed.add_field(
            name=f"👤 Banli Kullanıcılar ({len(banned['usernames'])})",
            value=usernames_text,
            inline=False
        )
    
    if banned['ips']:
        ips_text = "\n".join([f"• `{ip}`" for ip in banned['ips']])
        banned_embed.add_field(
            name=f"🌐 Banli IP'ler ({len(banned['ips'])})",
            value=ips_text,
            inline=False
        )
    
    if not banned['usernames'] and not banned['ips']:
        banned_embed.add_field(
            name="📋 Durum",
            value="Henüz banlanmış kullanıcı bulunmuyor.",
            inline=False
        )
    
    await ctx.send(embed=banned_embed)

@bot.command(name='unban')
@has_admin_role()
async def unban_user(ctx, username=None, ip=None):
    """Unban a user by username and/or IP"""
    
    # Delete user's command message
    try:
        await ctx.message.delete()
    except:
        pass
    
    if not username and not ip:
        error_embed = create_embed(
            "❌ Hatalı Kullanım",
            "**Kullanım:** `!unban <kullanıcı_adı> [ip]`\n**Örnek:** `!unban TestUser 192.168.1.1`",
            0xff0000
        )
        await ctx.send(embed=error_embed)
        return
    
    unban_data = {}
    if username:
        unban_data['username'] = username
    if ip:
        unban_data['ip'] = ip
    
    # Create loading embed
    loading_embed = create_embed(
        "🔄 Kullanıcı Ban Kaldırılıyor...",
        f"**👤 Kullanıcı:** {username or 'Belirtilmedi'}\n**🌐 IP:** {ip or 'Belirtilmedi'}",
        0xffff00
    )
    msg = await ctx.send(embed=loading_embed)
    
    # Unban via API
    result = make_api_request('unban-user', unban_data)
    
    if 'error' in result:
        error_embed = create_embed(
            "❌ Unban Hatası",
            f"**Hata:** {result['error']}",
            0xff0000
        )
        await msg.edit(embed=error_embed)
        return
    
    # Success embed
    success_embed = create_embed(
        "✅ Kullanıcı Ban'ı Kaldırıldı",
        f"**👤 Kullanıcı:** `{username or 'Belirtilmedi'}`\n**🌐 IP:** `{ip or 'Belirtilmedi'}`\n**👮 İşlemi Yapan:** {ctx.author.mention}",
        0x00ff00
    )
    success_embed.add_field(
        name="✅ Bilgi", 
        value="Bu kullanıcı artık sisteme tekrar erişebilecek!", 
        inline=False
    )
    await msg.edit(embed=success_embed)
    
    # Log to console
    print(f"✅ User unbanned by {ctx.author}: {username} / {ip}")

@bot.command(name='help')
async def show_help(ctx):
    """Show available commands"""
    
    # Delete user's command message
    try:
        await ctx.message.delete()
    except:
        pass
    
    help_embed = create_embed(
        "🔐 Keylogin Management Bot",
        f"**👋 Merhaba {ctx.author.mention}!**\n\n**🤖 Bot Version:** 2.0 | **🎯 Admin Role:** `{ADMIN_ROLE}`",
        0x00d4ff
    )
    
    # Ana komutlar - İki sütunlu düzen
    help_embed.add_field(
        name="🔑 Key Yönetimi",
        value="```\n!genkey  - Yeni lisans anahtarı\n!keys    - Key listesi\n!stats   - İstatistikler```",
        inline=True
    )
    
    help_embed.add_field(
        name="❓ Yardım",
        value="```\n!help    - Bu yardım menüsü\n         - Detaylı bilgi\n         - Komut örnekleri```",
        inline=True
    )
    
    # Boş alan ekle (simetri için)
    help_embed.add_field(name="\u200b", value="\u200b", inline=False)
    
    # Ban yönetimi - İki sütunlu
    help_embed.add_field(
        name="🚫 Ban İşlemleri",
        value="```\n!ban     - Kullanıcı banla\n!unban   - Ban kaldır\n!banned  - Ban listesi```",
        inline=True
    )
    
    help_embed.add_field(
        name="🔍 Ban Kontrol",
        value="```\n!checkban - Ban durumu\n          - Kullanıcı kontrol\n          - IP kontrol```",
        inline=True
    )
    
    # Boş alan ekle (simetri için)
    help_embed.add_field(name="\u200b", value="\u200b", inline=False)
    
    # Kullanım örnekleri - Tek sütun, ortalanmış
    help_embed.add_field(
        name="📚 Kullanım Örnekleri",
        value="""
```yaml
Key İşlemleri:
  !genkey                    # Yeni key oluştur
  !keys                      # Tüm keyleri listele

Ban İşlemleri:
  !ban TestUser              # Kullanıcı + IP banla
  !ban _ 192.168.1.100       # Sadece IP banla
  !unban TestUser            # Ban kaldır
  !checkban TestUser         # Ban kontrol et

Sistem:
  !stats                     # Detaylı istatistikler
```""",
        inline=False
    )
    
    # Ban sistemi açıklaması - Tek sütun
    help_embed.add_field(
        name="⚠️ Ban Sistemi Nasıl Çalışır?",
        value="""
**• Kullanıcı Ban:** `!ban TestUser` → Hem kullanıcı adı hem IP'si banlanır
**• IP Ban:** `!ban _ 192.168.1.1` → Sadece belirtilen IP banlanır  
**• Çifte Ban:** `!ban TestUser 192.168.1.1` → Her ikisi de banlanır
**• Güvenlik:** Bannlanan kullanıcı farklı isimle girse bile IP'den engellenir
        """,
        inline=False
    )
    
    # Alt bilgi alanları - İki sütunlu
    help_embed.add_field(
        name="🔒 Yetki Bilgisi",
        value=f"**Gerekli Rol:** `{ADMIN_ROLE}`\n**Yetki Kontrolü:** Aktif\n**Güvenlik:** Maksimum",
        inline=True
    )
    
    help_embed.add_field(
        name="🔗 Sistem Durumu",
        value=f"**API:** 🟢 Bağlı\n**Bot:** 🟢 Aktif\n**Database:** 🟢 Çalışıyor",
        inline=True
    )
    
    # Footer bilgisi - Geliştirilmiş
    help_embed.set_footer(
        text="🛡️ Tüm işlemler loglanır • Güvenlik altındadır • Keylogin Management v2.0",
        icon_url=bot.user.avatar.url if bot.user.avatar else None
    )
    
    await ctx.send(embed=help_embed)

@bot.event
async def on_command_error(ctx, error):
    """Handle command errors"""
    
    # Delete user's command message
    try:
        await ctx.message.delete()
    except:
        pass
    
    if isinstance(error, commands.CheckFailure):
        error_embed = create_embed(
            "🔒 Yetki Hatası",
            f"**Bu komutu kullanmak için `{ADMIN_ROLE}` rolüne sahip olmanız gerekiyor!**\n\n**👤 Kullanıcı:** {ctx.author.mention}",
            0xff0000
        )
        error_embed.add_field(
            name="💡 Çözüm",
            value="Sunucu yöneticisinden gerekli rolü talep edin.",
            inline=False
        )
        await ctx.send(embed=error_embed)
    
    elif isinstance(error, commands.CommandNotFound):
        error_embed = create_embed(
            "❓ Bilinmeyen Komut",
            f"**Girdiğiniz komut bulunamadı!**\n\n**👤 Kullanıcı:** {ctx.author.mention}",
            0xffaa00
        )
        error_embed.add_field(
            name="💡 Yardım",
            value="`!help` komutunu kullanarak mevcut komutları görebilirsiniz.",
            inline=False
        )
        await ctx.send(embed=error_embed)
    
    else:
        error_embed = create_embed(
            "⚠️ Sistem Hatası",
            f"**Beklenmeyen bir hata oluştu!**\n\n**Hata:** `{str(error)}`\n**👤 Kullanıcı:** {ctx.author.mention}",
            0xff0000
        )
        await ctx.send(embed=error_embed)
        print(f"Command error: {error}")

if __name__ == "__main__":
    print("🚀 Starting Keylogin Management Bot...")
    print("📋 Make sure to configure:")
    print("   • TOKEN - Your Discord bot token")
    print("   • GUILD_ID - Your Discord server ID")
    print("   • API_URL - Your API server URL")
    print("   • ADMIN_ROLE - Admin role name")
    print("=" * 50)
    
    # Check required environment variables
    missing_vars = []
    if not TOKEN:
        missing_vars.append("TOKEN")
    if not API_URL:
        missing_vars.append("API_URL")
    if not API_TOKEN:
        missing_vars.append("API_TOKEN")
    
    if missing_vars:
        print(f"❌ Missing required environment variables: {', '.join(missing_vars)}")
        print("🔧 Please configure these in Railway Dashboard > Variables tab:")
        print(f"   TOKEN = your_discord_bot_token")
        print(f"   API_URL = https://midnightponywka.com/api_optimized.php")
        print(f"   API_TOKEN = MIDNIGHTPONYWKA_SUPER_SECRET_2024_XYZ")
        print(f"   ADMIN_ROLE = Admin")
        exit(1)
    
    try:
        bot.run(TOKEN)
    except Exception as e:
        print(f"❌ Failed to start bot: {e}") 

import os
import discord
from discord.ext import commands
import requests
import json
import asyncio
from datetime import datetime

# Bot Configuration
TOKEN = os.getenv("TOKEN")
GUILD_ID = 1234567890  # Your Discord server ID
ADMIN_ROLE = os.getenv("ADMIN_ROLE", "Admin")
API_URL = os.getenv("API_URL")
API_TOKEN = os.getenv("API_TOKEN")

# Bot setup
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

# Varsayılan help komutunu kaldır
bot.remove_command('help')

def make_api_request(action, data=None):
    """Make API request to the server"""
    try:
        url = f"{API_URL}?api=1&token={API_TOKEN}&action={action}"
        
        if data:
            response = requests.post(url, data=data, timeout=10)
        else:
            response = requests.get(url, timeout=10)
            
        return response.json()
    except Exception as e:
        return {"error": f"API request failed: {str(e)}"}

def has_admin_role():
    """Check if user has admin role"""
    def predicate(ctx):
        return any(role.name == ADMIN_ROLE for role in ctx.author.roles)
    return commands.check(predicate)

@bot.event
async def on_ready():
    print(f'🚀 {bot.user} is online and ready!')
    print(f'📊 Connected to {len(bot.guilds)} servers')
    
    # Set bot status
    await bot.change_presence(
        status=discord.Status.online,
        activity=discord.Game(name="🔐 Keylogin Management System")
    )

@bot.command(name='genkey')
@has_admin_role()
async def generate_key(ctx):
    """Generate a new license key"""
    
    msg = await ctx.send("🔄 Generating key...")
    
    # Generate key via API
    result = make_api_request('generate-key')
    
    if 'error' in result:
        await msg.edit(content=f"❌ Error: {result['error']}")
        return
    
    # Success
    await msg.edit(content=f"✅ **Key:** `{result['key']}`\n📅 Created: {result['created']}")
    
    # Log to console
    print(f"🔑 Key generated by {ctx.author}: {result['key']}")

@bot.command(name='ban')
@has_admin_role()
async def ban_user(ctx, username=None, ip=None):
    """Ban a user by username and/or IP"""
    
    if not username and not ip:
        await ctx.send("❌ Usage: `!ban <username> [ip]`")
        return
    
    ban_data = {}
    if username:
        ban_data['username'] = username
    if ip:
        ban_data['ip'] = ip
    
    msg = await ctx.send("🔄 Banning user...")
    
    # Ban via API
    result = make_api_request('ban-user', ban_data)
    
    if 'error' in result:
        await msg.edit(content=f"❌ Error: {result['error']}")
        return
    
    # Success
    await msg.edit(content=f"🚫 User banned!\n👤 `{username}`\n🌐 `{ip}`")
    
    # Log to console
    print(f"🔨 User banned by {ctx.author}: {username} / {ip}")

@bot.command(name='checkban')
@has_admin_role()
async def check_ban(ctx, username=None, ip=None):
    """Check if a user is banned"""
    
    if not username and not ip:
        await ctx.send("❌ Usage: `!checkban <username> [ip]`")
        return
    
    # Prepare check data
    check_data = {}
    if username:
        check_data['username'] = username
    if ip:
        check_data['ip'] = ip
    
    # Check via API
    result = make_api_request('check-ban', check_data)
    
    if 'error' in result:
        await ctx.send(f"❌ Error: {result['error']}")
        return
    
    # Display result
    if result.get('banned'):
        await ctx.send(f"🚫 **BANNED**\n👤 `{username}`\n🌐 `{ip}`")
    else:
        await ctx.send(f"✅ **NOT BANNED**\n👤 `{username}`\n🌐 `{ip}`")

@bot.command(name='stats')
@has_admin_role()
async def show_stats(ctx):
    """Show system statistics"""
    
    result = make_api_request('stats')
    
    if 'error' in result:
        await ctx.send(f"❌ Error: {result['error']}")
        return
    
    msg = (
        f"📊 **System Stats**\n"
        f"🔑 Total Keys: {result['total_keys']}\n"
        f"✅ Used Keys: {result['used_keys']}\n"
        f"🆕 Available: {result['available_keys']}\n"
        f"🚫 Banned Users: {result['banned_users']}\n"
        f"🚫 Banned IPs: {result['banned_ips']}\n"
        f"📈 Access Attempts: {result['total_access_attempts']}"
    )
    
    await ctx.send(msg)

@bot.command(name='keys')
@has_admin_role()
async def list_keys(ctx):
    """List all license keys"""
    
    result = make_api_request('list-keys')
    
    if 'error' in result:
        await ctx.send(f"❌ Error: {result['error']}")
        return
    
    keys = result.get('keys', {})
    
    if not keys:
        await ctx.send("🔑 No keys found.")
        return
    
    msg = "**Keys:**\n"
    for key, data in list(keys.items())[:10]:
        msg += f"`{key}` - {'USED' if data['used'] else 'UNUSED'} - {data.get('username','-')}\n"
    
    await ctx.send(msg)

@bot.command(name='banned')
@has_admin_role()
async def list_banned(ctx):
    """List all banned users"""
    
    result = make_api_request('list-banned')
    
    if 'error' in result:
        await ctx.send(f"❌ Error: {result['error']}")
        return
    
    banned = result.get('banned', {'usernames': [], 'ips': []})
    
    msg = "**Banned Users:**\n"
    if banned['usernames']:
        msg += "👤 " + ", ".join(banned['usernames']) + "\n"
    if banned['ips']:
        msg += "🌐 " + ", ".join(banned['ips']) + "\n"
    if not banned['usernames'] and not banned['ips']:
        msg += "None."
    
    await ctx.send(msg)

@bot.command(name='help')
async def show_help(ctx):
    """Show available commands"""
    
    msg = (
        "**Keylogin Bot Commands:**\n"
        "`!genkey` - Generate new license key\n"
        "`!ban <username> [ip]` - Ban user\n"
        "`!checkban <username> [ip]` - Check ban status\n"
        "`!stats` - Show statistics\n"
        "`!keys` - List all keys\n"
        "`!banned` - List banned users\n"
        "`!help` - Show this help"
    )
    
    await ctx.send(msg)

@bot.event
async def on_command_error(ctx, error):
    """Handle command errors"""
    
    if isinstance(error, commands.CheckFailure):
        await ctx.send(f"❌ You need the `{ADMIN_ROLE}` role to use this command.")
    
    elif isinstance(error, commands.CommandNotFound):
        await ctx.send("❓ Unknown command. Use `!help`.")
    
    else:
        await ctx.send(f"⚠️ Error: {str(error)}")
        print(f"Command error: {error}")

if __name__ == "__main__":
    print("🚀 Starting Keylogin Management Bot...")
    print("📋 Make sure to configure:")
    print("   • TOKEN - Your Discord bot token")
    print("   • GUILD_ID - Your Discord server ID")
    print("   • API_URL - Your API server URL")
    print("   • ADMIN_ROLE - Admin role name")
    print("=" * 50)
    
    try:
        bot.run(TOKEN)
    except Exception as e:
        print(f"❌ Failed to start bot: {e}") 
